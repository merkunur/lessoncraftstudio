// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE USER MANAGEMENT
// ==========================================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String?   @map("first_name")
  lastName          String?   @map("last_name")
  emailVerified     Boolean   @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  verificationToken String?   @unique @map("verification_token")

  // Subscription info
  subscriptionTier   String  @default("free") @map("subscription_tier") // "free", "core", "full"
  subscriptionStatus String? @map("subscription_status") // Stripe subscription status: "active", "past_due", "canceled", etc.
  stripeCustomerId   String? @unique @map("stripe_customer_id")

  // User settings
  language   String  @default("en")
  timezone   String  @default("UTC")
  newsletter Boolean @default(true)

  // Admin and status
  isAdmin         Boolean   @default(false) @map("is_admin")
  isSuspended     Boolean   @default(false) @map("is_suspended")
  suspendedAt     DateTime? @map("suspended_at")
  suspendedReason String?   @map("suspended_reason")

  // Dunning & Payment Recovery
  gracePeriodEndsAt  DateTime? @map("grace_period_ends_at")
  accountSuspendedAt DateTime? @map("account_suspended_at")

  // Timestamps
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  subscription        Subscription?
  sessions            Session[]
  passwordResets      PasswordReset[]
  accountSharingLogs  AccountSharingLog[]
  blogPosts           BlogPost[]
  blogComments        BlogComment[]
  blogLikes           BlogLike[]
  analyticsEvents     AnalyticsEvent[]
  payments            Payment[]
  paymentFailures     PaymentFailure[]
  notifications       Notification[]
  activityLogs        ActivityLog[]
  supportTickets      SupportTicket[]
  userRoles           UserRole[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([subscriptionTier])
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // "Admin", "Editor", "Support", "Viewer"
  slug        String   @unique // "admin", "editor", "support", "viewer"
  description String?
  permissions Json     // Array of permission strings: ["users:read", "users:write", "content:read", ...]
  isSystem    Boolean  @default(false) @map("is_system") // Prevent deletion of system roles

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userRoles   UserRole[]

  @@index([slug])
  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")

  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

// ==========================================
// AUTHENTICATION & SESSIONS
// ==========================================

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  token        String   @unique
  refreshToken String?  @unique @map("refresh_token")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Device Tracking Fields (for account sharing prevention)
  deviceId       String?  @map("device_id") // Fingerprint from FingerprintJS
  deviceName     String?  @map("device_name") // "Chrome on MacOS"
  deviceType     String?  @map("device_type") // "desktop", "mobile", "tablet"
  browser        String?
  os             String?
  country        String?
  city           String?
  lastActivityAt DateTime @default(now()) @map("last_activity_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([deviceId])
  @@index([expiresAt])
  @@map("sessions")
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_resets")
}

model AccountSharingLog {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  eventType String  @map("event_type") // "device_limit_exceeded", "impossible_travel", "rapid_login"
  deviceId  String? @map("device_id")
  ipAddress String? @map("ip_address")
  location  String? // "City, Country" format
  metadata  Json? // Additional context

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@map("account_sharing_logs")
}

// ==========================================
// SUBSCRIPTION & PAYMENTS
// ==========================================

model Subscription {
  id                   String  @id @default(cuid())
  userId               String  @unique @map("user_id")
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")
  stripePriceId        String? @map("stripe_price_id")

  // Plan details
  planName        String  @map("plan_name") // "free", "core_monthly", "core_yearly", "full_monthly", "full_yearly"
  status          String // "active", "past_due", "canceled", "incomplete", "unpaid"
  billingInterval String? @map("billing_interval") // "monthly" or "yearly"

  // Billing period
  currentPeriodStart DateTime? @map("current_period_start")
  currentPeriodEnd   DateTime? @map("current_period_end")

  // Trial fields (kept for data integrity but not used - no trials offered)
  trialStart DateTime? @map("trial_start")
  trialEnd   DateTime? @map("trial_end")

  // Cancellation
  cancelAtPeriodEnd Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt        DateTime? @map("canceled_at")
  cancelReason      String?   @map("cancel_reason")

  // Dunning
  pastDueAt       DateTime? @map("past_due_at")
  unpaidInvoiceId String?   @map("unpaid_invoice_id")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([planName])
  @@map("subscriptions")
}

model Payment {
  id                     String  @id @default(cuid())
  userId                 String  @map("user_id")
  stripePaymentId        String? @unique @map("stripe_payment_id")
  stripePaymentIntentId  String? @unique @map("stripe_payment_intent_id")
  stripeInvoiceId        String? @unique @map("stripe_invoice_id")

  amount         Float
  currency       String  @default("usd")
  status         String // "pending", "processing", "succeeded", "failed", "refunded", "partially_refunded"
  description    String?
  refundedAmount Float   @default(0) @map("refunded_amount")

  // Invoice details
  invoiceUrl String? @map("invoice_url")
  invoicePdf String? @map("invoice_pdf")
  receiptUrl String? @map("receipt_url")

  // Metadata
  metadata      Json?
  failureReason String? @map("failure_reason")

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripePaymentId])
  @@index([stripePaymentIntentId])
  @@index([stripeInvoiceId])
  @@index([status])
  @@map("payments")
}

model PaymentFailure {
  id     String @id @default(cuid())
  userId String @map("user_id")

  stripeInvoiceId       String  @map("stripe_invoice_id")
  stripePaymentIntentId String? @map("stripe_payment_intent_id")

  failureCode    String  @map("failure_code") // "card_declined", "insufficient_funds", etc.
  failureMessage String? @map("failure_message")

  amount   Float
  currency String @default("usd")

  retryCount  Int       @default(0) @map("retry_count")
  lastRetryAt DateTime? @map("last_retry_at")
  nextRetryAt DateTime? @map("next_retry_at")

  recoveredAt DateTime? @map("recovered_at")
  recoveredBy String?   @map("recovered_by") // "stripe_retry", "customer_update", "admin"

  status String @default("pending") // "pending", "retrying", "recovered", "failed"

  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([nextRetryAt])
  @@map("payment_failures")
}

// ==========================================
// WORKSHEET SAMPLES
// ==========================================

model SampleWorksheet {
  id String @id @default(cuid())

  appName      String  @map("app_name")
  title        String
  description  String?
  thumbnailUrl String  @map("thumbnail_url")
  fileUrl      String  @map("file_url")

  category   String?
  difficulty String? // "easy", "medium", "hard"
  ageRange   String? @map("age_range") // "3-5", "6-8", "9-12", etc.

  // Display settings
  featured  Boolean @default(false)
  sortOrder Int     @default(0) @map("sort_order")

  // Statistics
  viewsCount     Int @default(0) @map("views_count")
  downloadsCount Int @default(0) @map("downloads_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([appName])
  @@index([category])
  @@index([featured])
  @@map("sample_worksheets")
}

// ==========================================
// IMAGE LIBRARY & CONTENT MANAGEMENT
// ==========================================

model ImageTheme {
  id           String   @id @default(cuid())
  name         String   @unique
  displayNames Json // {en: "Animals", de: "Tiere", fr: "Animaux", ...}
  type         String   @default("images") // "images", "borders", "backgrounds", "train", "worksheet"
  sortOrder    Int      @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  images ImageLibraryItem[]

  @@index([name])
  @@index([type])
  @@map("image_themes")
}

model ImageLibraryItem {
  id           String   @id @default(cuid())
  themeId      String   @map("theme_id")
  filename     String
  filePath     String   @map("file_path") // Relative path from public folder
  fileSize     Int      @map("file_size") // In bytes
  mimeType     String   @map("mime_type") // "image/svg+xml", "image/png", etc.
  width        Int?
  height       Int?
  translations Json // {en: "Cat", de: "Katze", fr: "Chat", ...}
  sortOrder    Int      @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  theme ImageTheme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@index([themeId])
  @@index([filename])
  @@map("image_library_items")
}

model BlogPDF {
  id          String   @id @default(cuid())
  postId      String   @map("post_id") // Links to blog post
  title       String
  description String   @db.Text
  filename    String
  filePath    String   @map("file_path")
  fileSize    Int      @map("file_size")
  thumbnail   String? // Path to thumbnail image
  price       String   @default("Free") // "Free" or price like "$5.99"
  downloads   Int      @default(0)
  sortOrder   Int      @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post      BlogPost @relation("BlogPostPDFs", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("blog_pdfs")
}

// ==========================================
// BLOG SYSTEM
// ==========================================

model BlogPost {
  id String @id @default(cuid())

  // Author info
  authorId String @map("author_id")

  // Content (multi-language support)
  slug          String  @unique // Base slug (e.g., "math-worksheets")
  translations  Json // {en: {title, excerpt, content, metaTitle, metaDescription}, de: {...}, ...}
  category      String // Category identifier
  keywords      String[] // Array of keywords for all languages

  // Featured Image
  featuredImage String? @map("featured_image")

  // Status
  status      String    @default("draft") // "draft", "published", "archived"
  publishedAt DateTime? @map("published_at")

  // Settings
  featured      Boolean @default(false)
  allowComments Boolean @default(true) @map("allow_comments")

  // PDF Attachments
  pdfs BlogPDF[] @relation("BlogPostPDFs")

  // Statistics
  viewsCount    Int @default(0) @map("views_count")
  likesCount    Int @default(0) @map("likes_count")
  commentsCount Int @default(0) @map("comments_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories BlogCategory[]
  tags       BlogTag[]
  comments   BlogComment[]
  likes      BlogLike[]

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([featured])
  @@map("blog_posts")
}

model BlogCategory {
  id String @id @default(cuid())

  name        String  @unique
  slug        String  @unique
  description String?
  color       String? // For UI display
  icon        String? // Icon identifier

  sortOrder Int @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  posts BlogPost[]

  @@index([slug])
  @@map("blog_categories")
}

model BlogTag {
  id String @id @default(cuid())

  name String @unique
  slug String @unique

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  posts BlogPost[]

  @@index([slug])
  @@map("blog_tags")
}

model BlogComment {
  id String @id @default(cuid())

  postId   String  @map("post_id")
  userId   String  @map("user_id")
  parentId String? @map("parent_id") // For nested comments

  content String @db.Text

  // Moderation
  status String @default("pending") // "pending", "approved", "rejected", "spam"

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  post    BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies BlogComment[] @relation("CommentReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
  @@map("blog_comments")
}

model BlogLike {
  id String @id @default(cuid())

  postId String @map("post_id")
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure unique likes per user per post
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("blog_likes")
}

// ==========================================
// ANALYTICS & TRACKING
// ==========================================

model AnalyticsEvent {
  id     String  @id @default(cuid())
  userId String? @map("user_id")

  // Event details
  eventType     String  @map("event_type") // "page_view", "app_launch", "worksheet_generated", etc.
  eventCategory String? @map("event_category") // "engagement", "conversion", "retention"
  eventAction   String? @map("event_action")
  eventLabel    String? @map("event_label")
  eventValue    Float?  @map("event_value")

  // Context
  pageUrl  String? @map("page_url")
  referrer String?
  appName  String? @map("app_name")

  // Session info
  sessionId String? @map("session_id")
  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")
  country   String?
  city      String?

  // Custom data
  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@index([sessionId])
  @@index([createdAt])
  @@map("analytics_events")
}

model ActivityLog {
  id     String @id @default(cuid())
  userId String @map("user_id")

  action   String // "login", "logout", "subscription_updated", etc.
  details  String?
  metadata Json?

  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

// ==========================================
// NOTIFICATIONS
// ==========================================

model Notification {
  id     String @id @default(cuid())
  userId String @map("user_id")

  type     String // "welcome", "trial_ending", "payment_failed", etc.
  title    String
  message  String
  priority String @default("normal") // "low", "normal", "high", "critical"

  // Action
  actionUrl   String? @map("action_url")
  actionLabel String? @map("action_label")

  // Status
  read   Boolean   @default(false)
  readAt DateTime? @map("read_at")

  // Email notification
  emailSent   Boolean   @default(false) @map("email_sent")
  emailSentAt DateTime? @map("email_sent_at")

  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

// ==========================================
// ADMIN & SYSTEM
// ==========================================

model SystemSetting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       Json
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([key])
  @@map("system_settings")
}

model SecuritySetting {
  id String @id @default("security") // Single row for security settings

  // Password Policy
  passwordMinLength        Int     @default(8) @map("password_min_length")
  passwordRequireUppercase Boolean @default(true) @map("password_require_uppercase")
  passwordRequireLowercase Boolean @default(true) @map("password_require_lowercase")
  passwordRequireNumbers   Boolean @default(true) @map("password_require_numbers")
  passwordRequireSpecial   Boolean @default(false) @map("password_require_special")

  // Session Management (Single Device Policy)
  maxSessionsPerUser    Int @default(1) @map("max_sessions_per_user")
  sessionTimeoutMinutes Int @default(60) @map("session_timeout_minutes")
  sessionIdleMinutes    Int @default(30) @map("session_idle_minutes")

  // Login Security
  maxLoginAttempts         Int     @default(5) @map("max_login_attempts")
  lockoutDurationMinutes   Int     @default(15) @map("lockout_duration_minutes")
  require2FA               Boolean @default(false) @map("require_2fa")
  require2FAForAdmins      Boolean @default(false) @map("require_2fa_for_admins")
  enableEmailVerification  Boolean @default(true) @map("enable_email_verification")

  // Account Sharing Detection (Single Device Policy)
  enableAccountSharingDetection Boolean @default(true) @map("enable_account_sharing_detection")
  maxConcurrentDevices          Int     @default(1) @map("max_concurrent_devices")
  suspiciousActivityThreshold   Int     @default(5) @map("suspicious_activity_threshold")

  // IP Security
  enableIpWhitelist Boolean  @default(false) @map("enable_ip_whitelist")
  ipWhitelist       String[] @default([]) @map("ip_whitelist")
  enableIpBlacklist Boolean  @default(false) @map("enable_ip_blacklist")
  ipBlacklist       String[] @default([]) @map("ip_blacklist")

  // Security Features
  enableCsrfProtection   Boolean @default(true) @map("enable_csrf_protection")
  enableRateLimiting     Boolean @default(true) @map("enable_rate_limiting")
  rateLimitRequestsPerMin Int    @default(100) @map("rate_limit_requests_per_min")

  // Audit Logging
  logAllAuthEvents      Boolean @default(true) @map("log_all_auth_events")
  logFailedLogins       Boolean @default(true) @map("log_failed_logins")
  logPasswordChanges    Boolean @default(true) @map("log_password_changes")
  logRoleChanges        Boolean @default(true) @map("log_role_changes")
  retainAuditLogDays    Int     @default(90) @map("retain_audit_log_days")

  // Metadata
  updatedBy String? @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("security_settings")
}

model EmailTemplate {
  id String @id @default(cuid())

  name        String  @unique // "welcome", "password_reset", etc.
  subject     String
  htmlContent String  @map("html_content") @db.Text
  textContent String? @map("text_content") @db.Text

  // Variables available in template
  variables String[] @default([]) // ["firstName", "resetLink", etc.]

  active Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@map("email_templates")
}

// ==========================================
// SUPPORT & FEEDBACK
// ==========================================

model SupportTicket {
  id String @id @default(cuid())

  // User info (can be submitted without account)
  userId String? @map("user_id")
  email  String
  name   String?

  // Ticket details
  subject  String
  message  String  @db.Text
  category String? // "bug", "feature_request", "billing", "other"
  priority String  @default("medium") // "low", "medium", "high", "urgent"

  // Status
  status     String  @default("open") // "open", "in_progress", "waiting", "resolved", "closed"
  assignedTo String? @map("assigned_to")

  // Response
  response    String?   @db.Text
  respondedAt DateTime? @map("responded_at")

  // Resolution
  resolved     Boolean   @default(false)
  resolvedAt   DateTime? @map("resolved_at")
  satisfaction Int? // 1-5 rating

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("support_tickets")
}

model FeatureRequest {
  id String @id @default(cuid())

  userId      String? @map("user_id")
  title       String
  description String  @db.Text

  // Voting
  votes    Int      @default(1)
  voterIds String[] @default([]) @map("voter_ids")

  // Status
  status String @default("submitted") // "submitted", "under_review", "planned", "in_development", "completed", "rejected"

  // Admin notes
  adminNotes    String? @map("admin_notes") @db.Text
  implementedIn String? @map("implemented_in") // Version number when implemented

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([status])
  @@index([votes])
  @@map("feature_requests")
}

// ==========================================
// HOMEPAGE CONTENT MANAGEMENT
// ==========================================

model HomepageContent {
  id String @id @default("homepage") // Single row for homepage content

  // Store all homepage content as JSON
  // This includes hero, features, samples, pricing, footer, SEO, etc. for all 11 languages
  content Json @db.JsonB

  // Metadata
  updatedBy String? @map("updated_by") // User ID or "admin"
  version   Int     @default(1) // For tracking content versions

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("homepage_content")
}
